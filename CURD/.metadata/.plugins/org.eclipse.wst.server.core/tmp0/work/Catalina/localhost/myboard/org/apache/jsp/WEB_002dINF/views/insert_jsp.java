/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.50
 * Generated at: 2021-08-02 06:11:59 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.mvc.myboard.userDto;

public final class insert_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.mvc.myboard.userDto");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<script src=\"https://code.jquery.com/jquery-3.5.1.min.js\"></script>\r\n");

	userDto login = (userDto) session.getAttribute("login");

      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	\r\n");
      out.write("	<form action=\"insertres.do\" method=\"post\" enctype=\"multipart/form-data\">\r\n");
      out.write("		<input type=\"hidden\" name=\"nowPage\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${nowPage }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\">\r\n");
      out.write("		<table border=\"1\">\r\n");
      out.write("		\r\n");
      out.write("		");

			if(login == null){
		
      out.write("\r\n");
      out.write("			<tr>\r\n");
      out.write("				<th>글쓴이</th>\r\n");
      out.write("				<td><input type=\"text\" name=\"myname\"></td>\r\n");
      out.write("			</tr>\r\n");
      out.write("		");

			} else if (login != null){
		
      out.write("\r\n");
      out.write("			<tr>\r\n");
      out.write("				<th>글쓴이</th>\r\n");
      out.write("				<td><input type=\"text\" name=\"myname\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${login.username }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\" readonly=\"readonly\"></td>\r\n");
      out.write("			</tr>\r\n");
      out.write("		");

			}
		
      out.write("\r\n");
      out.write("			<tr>\r\n");
      out.write("				<th>제목</th>\r\n");
      out.write("				<td><input type=\"text\" name=\"mytitle\" maxlength=\"30\" id=\"mytitle\" placeholder=\"50자까지 작성 가능합니다\"></td>\r\n");
      out.write("			</tr>\r\n");
      out.write("			<tr>\r\n");
      out.write("				<th>내용</th>\r\n");
      out.write("				<td>\r\n");
      out.write("					<textarea rows=\"10\" cols=\"60\" name=\"mycontent\" id=\"mycontent\"  placeholder=\"1000byte까지 작성 가능합니다\"></textarea>\r\n");
      out.write("				</td>\r\n");
      out.write("			</tr>\r\n");
      out.write("			<tr>\r\n");
      out.write("				<td colspan=\"2\" align=\"right\" id=\"textlength\">0/1000byte</td>\r\n");
      out.write("			</tr>\r\n");
      out.write("			");

				if(login == null){
			
      out.write("\r\n");
      out.write("			<tr>\r\n");
      out.write("				<th>게시물 비밀번호</th>\r\n");
      out.write("				<td>\r\n");
      out.write("					<input type=\"password\" maxlength=\"4\" name=\"myboardpw\" id=\"myboardpw\" placeholder=\"4자리까지 숫자만 가능합니다\">\r\n");
      out.write("				</td>\r\n");
      out.write("			</tr>\r\n");
      out.write("			");

				}
			
      out.write("\r\n");
      out.write("			<tr>\r\n");
      out.write("				<th>파일 업로드</th>\r\n");
      out.write("				<td>\r\n");
      out.write("					<input type=\"file\" name=\"fileup\"> 3MB의 용량까지만 업로드 가능합니다\r\n");
      out.write("				</td>\r\n");
      out.write("			</tr>\r\n");
      out.write("			<tr>\r\n");
      out.write("				<td colspan=\"2\" align=\"right\">\r\n");
      out.write("					<input type=\"submit\" value=\"글작성\">\r\n");
      out.write("					<input type=\"button\" value=\"취소\" onclick=\"history.back();\" />\r\n");
      out.write("				</td>\r\n");
      out.write("			</tr>\r\n");
      out.write("		</table>\r\n");
      out.write("	</form>\r\n");
      out.write("	<script type=\"text/javascript\">\r\n");
      out.write("	\r\n");
      out.write("	$(\"#myboardpw\").keyup(function(event){\r\n");
      out.write("	    var inputVal = $(this).val();\r\n");
      out.write("	    $(this).val(inputVal.replace(/[^0-9]/gi,''));\r\n");
      out.write("	});\r\n");
      out.write("	\r\n");
      out.write("	$(\"#mycontent\").keyup(function(){\r\n");
      out.write("		// 총 바이트 값\r\n");
      out.write("		var totalByte = 0;\r\n");
      out.write("		// 정해진 값 넘어가면 저장할 글자\r\n");
      out.write("		var saveMsg = \"\";\r\n");
      out.write("		// 현재 입력된값\r\n");
      out.write("		var message = $(\"#mycontent\").val();\r\n");
      out.write("		// 1000byte넘으면 맨뒷글 잘라서 저장할 변수\r\n");
      out.write("		var msgLength = 0;\r\n");
      out.write("		//현재 작성된 글 만큼 for문 반복\r\n");
      out.write("		console.log(totalByte)\r\n");
      out.write("		for(var i =0; i < message.length; i++) {\r\n");
      out.write("			// 해당 글자의 code를 가져온다\r\n");
      out.write("			var currentByte = message.charCodeAt(i);\r\n");
      out.write("			// 한글은 2자, 그외는 1자를 추가해준다\r\n");
      out.write("			if(totalByte < 1000){\r\n");
      out.write("				if(currentByte > 128){\r\n");
      out.write("					totalByte += 2;\r\n");
      out.write("					msgLength++;\r\n");
      out.write("					$(\"#textlength\").html(totalByte + '/1000byte');\r\n");
      out.write("				} else { \r\n");
      out.write("					totalByte++;\r\n");
      out.write("					msgLength++;\r\n");
      out.write("					$(\"#textlength\").html(totalByte + '/1000byte');\r\n");
      out.write("				}\r\n");
      out.write("			} else if(totalByte >= 1000){\r\n");
      out.write("				var subLength = message.length - msgLength;\r\n");
      out.write("				saveMsg = message.substring(0, message.length-subLength)\r\n");
      out.write("				$(\"#mycontent\").val(saveMsg);\r\n");
      out.write("				alert(\"1000byte를 넘길 수 없습니다.\")\r\n");
      out.write("				break;\r\n");
      out.write("			}\r\n");
      out.write("			\r\n");
      out.write("		}\r\n");
      out.write("	});\r\n");
      out.write("	</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
